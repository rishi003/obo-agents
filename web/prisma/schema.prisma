datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  messages      Message[]
  participants  Participant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id           String @id @default(uuid())
  name         String
  messages     Message[]
  participants Participant[]
}

model Message {
  id      String @id @default(uuid())
  userId  String
  chatId  String
  content String
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat    Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Participant {
  id      String @id @default(uuid())
  userId  String
  chatId  String
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat    Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
}